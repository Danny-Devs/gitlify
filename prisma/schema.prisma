// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Application Models
model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @default(now()) @updatedAt @map("updated_at")
  
  accounts      Account[]
  sessions      Session[]
  apiKeys       ApiKey[]
  repositories  Repository[]
  analyses      Analysis[]
  templates     Template[]
  llmConfigs    LLMConfiguration[]

  @@map("users")
}

model ApiKey {
  id           String    @id @default(cuid())
  name         String
  key          String    @unique
  userId       String    @map("user_id")
  lastUsed     DateTime? @map("last_used")
  createdAt    DateTime  @default(now()) @map("created_at")
  expiresAt    DateTime? @map("expires_at")
  isActive     Boolean   @default(true) @map("is_active")
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model Repository {
  id           String     @id @default(cuid())
  name         String
  owner        String
  description  String?
  url          String
  isPrivate    Boolean    @default(false) @map("is_private")
  stars        Int?
  forks        Int?
  userId       String     @map("user_id")
  lastAnalyzed DateTime?  @map("last_analyzed")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @default(now()) @updatedAt @map("updated_at")
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  analyses     Analysis[]

  @@map("repositories")
}

model Analysis {
  id            String          @id @default(cuid())
  repositoryId  String          @map("repository_id")
  userId        String          @map("user_id")
  templateId    String?         @map("template_id")
  status        String
  startedAt     DateTime        @map("started_at")
  completedAt   DateTime?       @map("completed_at")
  error         String?
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @default(now()) @updatedAt @map("updated_at")
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  repository    Repository      @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  template      Template?       @relation(fields: [templateId], references: [id])
  results       AnalysisResult[]
  fileAnalyses  FileAnalysis[]

  @@map("analyses")
}

model AnalysisResult {
  id         String   @id @default(cuid())
  analysisId String   @map("analysis_id")
  summary    String
  details    String   @db.Text
  metadata   Json?
  createdAt  DateTime @default(now()) @map("created_at")
  analysis   Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)

  @@map("analysis_results")
}

model FileAnalysis {
  id         String   @id @default(cuid())
  analysisId String   @map("analysis_id")
  path       String
  content    String?  @db.Text
  analysis   String   @db.Text
  createdAt  DateTime @default(now()) @map("created_at")
  analysisRel Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)

  @@map("file_analyses")
}

model Template {
  id          String     @id @default(cuid())
  name        String
  description String
  prompt      String     @db.Text
  isSystem    Boolean    @default(false) @map("is_system")
  userId      String?    @map("user_id")
  parameters  Json?
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @default(now()) @updatedAt @map("updated_at")
  user        User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  analyses    Analysis[]

  @@map("templates")
}

model LLMConfiguration {
  id          String   @id @default(cuid())
  name        String
  endpoint    String
  apiKey      String?  @map("api_key")
  model       String
  parameters  Json?
  isActive    Boolean  @default(true) @map("is_active")
  userId      String   @map("user_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("llm_configurations")
} 