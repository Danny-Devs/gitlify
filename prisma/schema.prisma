// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Application Models
model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @default(now()) @updatedAt @map("updated_at")
  
  accounts      Account[]
  sessions      Session[]
  apiKeys       ApiKey[]
  repositories  Repository[]
  prds          PRD[]
  llmConfigs    LLMConfiguration[]
  workflowRuns  WorkflowRun[]
  ratings       Rating[]
  comments      Comment[]

  @@map("users")
}

model ApiKey {
  id           String    @id @default(cuid())
  name         String
  key          String    @unique
  userId       String    @map("user_id")
  lastUsed     DateTime? @map("last_used")
  createdAt    DateTime  @default(now()) @map("created_at")
  expiresAt    DateTime? @map("expires_at")
  isActive     Boolean   @default(true) @map("is_active")
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model Repository {
  id           String     @id @default(cuid())
  name         String
  owner        String
  description  String?
  url          String
  isPrivate    Boolean    @default(false) @map("is_private")
  stars        Int?
  forks        Int?
  userId       String     @map("user_id")
  lastAnalyzed DateTime?  @map("last_analyzed")
  lastCommitSha String?   @map("last_commit_sha")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @default(now()) @updatedAt @map("updated_at")
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  prds         PRD[]
  workflowRuns WorkflowRun[]

  @@unique([url, userId])
  @@index([userId])
  @@map("repositories")
}

model PRD {
  id             String    @id @default(cuid())
  title          String
  summary        String    @db.Text
  metadata       Json      @default("{}")
  status         String    @default("draft") // draft, published, archived
  repositoryId   String    @map("repository_id")
  userId         String    @map("user_id")
  workflowStateId String?  @map("workflow_state_id")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @default(now()) @updatedAt @map("updated_at")
  
  repository     Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workflowState  WorkflowState? @relation(fields: [workflowStateId], references: [id])
  chapters       Chapter[]
  diagrams       Diagram[]
  ratings        Rating[]
  comments       Comment[]

  @@index([repositoryId])
  @@index([userId])
  @@map("prds")
}

model Chapter {
  id         String   @id @default(cuid())
  title      String
  orderIndex Int      @map("order_index")
  content    String   @db.Text
  prdId      String   @map("prd_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")
  
  prd        PRD      @relation(fields: [prdId], references: [id], onDelete: Cascade)
  diagrams   Diagram[]

  @@index([prdId, orderIndex])
  @@map("chapters")
}

model Diagram {
  id          String   @id @default(cuid())
  title       String
  type        String   // component, data_flow, entity_relationship, etc.
  mermaidCode String   @db.Text @map("mermaid_code")
  description String   @db.Text
  prdId       String   @map("prd_id")
  chapterId   String?  @map("chapter_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  
  prd         PRD      @relation(fields: [prdId], references: [id], onDelete: Cascade)
  chapter     Chapter?  @relation(fields: [chapterId], references: [id])

  @@index([prdId])
  @@index([chapterId])
  @@map("diagrams")
}

model Rating {
  id        String   @id @default(cuid())
  score     Int
  feedback  String?  @db.Text
  prdId     String   @map("prd_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  
  prd       PRD      @relation(fields: [prdId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([prdId, userId])
  @@map("ratings")
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  prdId     String   @map("prd_id")
  userId    String   @map("user_id")
  parentId  String?  @map("parent_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  
  prd       PRD      @relation(fields: [prdId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: SetNull)
  replies   Comment[] @relation("CommentReplies")

  @@index([prdId])
  @@index([parentId])
  @@map("comments")
}

model LLMConfiguration {
  id             String   @id @default(cuid())
  name           String
  endpoint       String
  apiKey         String?  @map("api_key")
  modelName      String   @map("model_name")
  contextWindow  Int      @map("context_window")
  isActive       Boolean  @default(true) @map("is_active")
  userId         String   @map("user_id")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")
  
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workflowRuns   WorkflowRun[]

  @@map("llm_configurations")
}

model WorkflowRun {
  id              String   @id @default(cuid())
  status          String   // pending, running, completed, failed
  startedAt       DateTime @default(now()) @map("started_at")
  completedAt     DateTime? @map("completed_at")
  repositoryId    String   @map("repository_id")
  userId          String   @map("user_id")
  configurationId String   @map("configuration_id")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at")
  
  repository      Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  configuration   LLMConfiguration @relation(fields: [configurationId], references: [id])
  workflowStates  WorkflowState[]

  @@index([repositoryId])
  @@map("workflow_runs")
}

model WorkflowState {
  id            String   @id @default(cuid())
  nodeName      String   @map("node_name")
  status        String   // pending, running, completed, failed
  input         Json     @default("{}")
  output        Json     @default("{}")
  workflowRunId String   @map("workflow_run_id")
  parentStateId String?  @map("parent_state_id")
  startedAt     DateTime? @map("started_at")
  completedAt   DateTime? @map("completed_at")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")
  
  workflowRun   WorkflowRun @relation(fields: [workflowRunId], references: [id], onDelete: Cascade)
  parentState   WorkflowState? @relation("WorkflowStateHierarchy", fields: [parentStateId], references: [id])
  childStates   WorkflowState[] @relation("WorkflowStateHierarchy")
  prds          PRD[]

  @@index([workflowRunId])
  @@map("workflow_states")
} 