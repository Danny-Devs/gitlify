# CodeNarrator: Project Rules for Cursor AI

## Project Overview

CodeNarrator transforms public GitHub repositories into engaging audio code tours using locally hosted LLMs. The application analyzes repositories, generates narrative explanations, converts them to audio, and provides supporting visualizations, creating a podcast-like learning experience for developers.

## Development Principles

- Optimize for an engaging audio learning experience
- Ensure high-quality text-to-speech conversion
- Create logical, narrative flows through codebases
- Generate visualizations that complement audio content
- Implement user feedback mechanisms to improve tour quality
- Design for passive consumption alongside active learning

## Code Style Guidelines

### General

- Use TypeScript for all code with strict type checking
- Follow functional programming principles where appropriate
- Optimize audio generation and playback components
- Keep functions small and focused on a single responsibility
- Apply learning science principles to content organization

### React Components

- Use functional components with hooks
- Follow a structure of imports → types → component → exports
- Create accessible audio player controls and visualization components
- Separate UI components from data-fetching logic
- Use React Query for API data fetching and caching
- Use Lucide icons from Shadcn UI instead of Hero icons for all iconography

### File Structure

- Place components in app/components/
- Services in app/services/
- Audio generation in app/services/audio/
- API routes in app/api/
- Utility functions in app/lib/
- Database models and queries in prisma/
- Visualization components in app/components/visualization/

### Database

- Always use Prisma client for database access with type safety
- Define all schema changes in prisma/schema.prisma
- Create migrations for all schema changes
- Store audio generation progress and results
- Track user feedback and A/B testing results

### Naming Conventions

- React components: PascalCase
- Functions and variables: camelCase
- Files: kebab-case.tsx for components, kebab-case.ts for others
- Database tables: PascalCase
- API routes: kebab-case

## Implementation Priorities

1. GitHub repository processing and analysis
2. Natural language explanation generation
3. Text-to-speech conversion and audio player
4. Chapter-based tour organization
5. Supporting visualization generation
6. User feedback and A/B testing system
7. Repository bookmarking and tour resumption

## Technology Constraints

- Next.js 15+ with App Router for frontend and API routes
- TypeScript for type safety throughout
- PostgreSQL with Prisma ORM for database
- TailwindCSS with Shadcn/UI components for UI
- Lucide icons through Shadcn/UI integration for iconography
- Octokit.js for GitHub API access
- Text-to-speech services for audio generation
- Visualization libraries for supporting diagrams
- Local LLM integration (Ollama, LM Studio)

## Testing Requirements

- Jest for unit and integration tests
- React Testing Library for component tests
- Audio playback testing strategies
- Mock GitHub API responses for testing
- User feedback simulation for A/B test development

## Documentation Standards

- JSDoc comments for functions and components
- Update README.md with new features
- Document audio tour generation process
- Include examples of different tour types
- Create user guides for optimal listening experience

## Accessibility

- All components should be accessible (WCAG 2.1 AA compliance)
- Audio player controls must be fully keyboard accessible
- Provide text transcripts of audio content
- Ensure visualizations have text alternatives
- Support variable playback speeds for different listening preferences
